call plug#begin('~/.vim/plugged')

" Theme
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

" Language-specific
Plug 'alfredodeza/pytest.vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'digitaltoad/vim-pug'
Plug 'elixir-lang/vim-elixir'
Plug 'evanleck/vim-svelte'
Plug 'groenewege/vim-less'
Plug 'guns/vim-clojure-static'
Plug 'hashivim/vim-terraform'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'leafgarland/typescript-vim'
Plug 'lepture/vim-jinja'
Plug 'mitsuhiko/vim-python-combined'
Plug 'mitsuhiko/vim-rst'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'posva/vim-vue'
Plug 'StanAngeloff/php.vim'
Plug 'thosakwe/vim-flutter'

" Generic
Plug 'airblade/vim-gitgutter'
Plug 'ap/vim-buftabline'
Plug 'bkad/CamelCaseMotion'
Plug 'danro/rename.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'mhinz/vim-sayonara'
Plug 'rstacruz/vim-opinion'
Plug 'rstacruz/vim-xtract'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/matchit.zip'
Plug 'wincent/ferret'
Plug 'wincent/terminus'

call plug#end()


" SETTINGS

set termguicolors

colorscheme tokyonight

set nocompatible

set noerrorbells
set novisualbell
set gcr=a:blinkon0 " Disable blinking cursor

" Set encoding
set encoding=utf-8

" Prefer unix
set fileformats=unix,dos,mac

" Whitespace stuff
set textwidth=88
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set formatoptions+=l
au BufWinEnter * call matchadd('ErrorMsg', '\%>88v.\+', -1) " Column Marker
au BufWritePre * :%s/\s\+$//e " Remove trailing whitespace

" Tab completion
let g:SuperTabDefaultCompletionType = "context"
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Use modeline overrides
set modeline
set modelines=10

" Use zsh as shell
set shell=zsh

" Use <space> as Leader key
let mapleader="\<Space>"

" Load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Completion
set completeopt=longest,menuone,preview

" Sudo write
cmap W! w !sudo tee % >/dev/null

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
nnoremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

noremap <Leader><Space> :noh<CR>:call clearmatches()<CR>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Don't move on *
nnoremap * *<c-o>

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" Fuck you too, manual key.
nnoremap K <nop>

" Stop it, hash key.
inoremap # X<BS>#

" Change case
nnoremap <C-u> gUiw
inoremap <C-u> <esc>gUiwea

" Don't prompt when files are externally changed
set autoread

" Auto close scratch
autocmd CursorMovedI *  if pumvisible() == 0|silent! pclose|endif
autocmd InsertLeave * if pumvisible() == 0|silent! pclose|endif

" Quicker window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" % to bounce from do to end etc.
runtime! macros/matchit.vim
map <tab> %

" Use system clipboard
set clipboard=unnamedplus


" FILETYPES

" Make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

" Wrap markdown
au BufRead,BufNewFile {*.md,*.markdown} set wrap

" Go
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

" Python
let g:python_host_prog = '/usr/bin/python2.7'
let g:python3_host_prog = '/Users/marksteve/.pyenv/shims/python3'

" JavaScript
let g:javascript_plugin_jsdoc = 1

" Clojure
let g:clojure_align_multiline_strings = 1
let g:clojure_align_subforms = 1
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
let g:rainbow#blacklist = [15, 7, 8]
augroup rainbow_lisp
  autocmd!
  autocmd FileType clojure RainbowParentheses
augroup END


" PLUGINS

" indent-guides
let g:indent_guides_enable_on_vim_startup = 1

" Sayonara
nnoremap <Leader>q :Sayonara<CR>
nnoremap <Leader>Q :Sayonara!<CR>

" colorpicker
let g:colorpicker_app = 'iTerm.app'

" fzf
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --glob="!.git/*"'
noremap <C-p> :FZF<CR>
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
nmap <Leader>b :Buffers<CR>

" Gundo
nnoremap <Leader>u :GundoToggle<CR>

" vim-terraform
let g:terraform_fmt_on_save = 1

" vim-flutter
nnoremap <Leader>fa :FlutterRun<CR>
nnoremap <Leader>fq :FlutterQuit<CR>
nnoremap <Leader>fr :FlutterHotReload<CR>
nnoremap <Leader>fR :FlutterHotRestart<CR>